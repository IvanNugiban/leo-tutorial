program bintodec.aleo;



function main:
    input r0 as i32.private;
    is.eq r0 0i32 into r1;
    rem r0 10i32 into r2;
    div r0 10i32 into r3;
    pow 2i32 0u32 into r4;
    mul r2 r4 into r5;
    add 0i32 r5 into r6;
    is.eq r3 0i32 into r7;
    rem r3 10i32 into r8;
    div r3 10i32 into r9;
    pow 2i32 1u32 into r10;
    mul r8 r10 into r11;
    add r6 r11 into r12;
    is.eq r9 0i32 into r13;
    rem r9 10i32 into r14;
    div r9 10i32 into r15;
    pow 2i32 2u32 into r16;
    mul r14 r16 into r17;
    add r12 r17 into r18;
    is.eq r15 0i32 into r19;
    rem r15 10i32 into r20;
    div r15 10i32 into r21;
    pow 2i32 3u32 into r22;
    mul r20 r22 into r23;
    add r18 r23 into r24;
    is.eq r21 0i32 into r25;
    rem r21 10i32 into r26;
    div r21 10i32 into r27;
    pow 2i32 4u32 into r28;
    mul r26 r28 into r29;
    add r24 r29 into r30;
    is.eq r27 0i32 into r31;
    rem r27 10i32 into r32;
    div r27 10i32 into r33;
    pow 2i32 5u32 into r34;
    mul r32 r34 into r35;
    add r30 r35 into r36;
    is.eq r33 0i32 into r37;
    rem r33 10i32 into r38;
    div r33 10i32 into r39;
    pow 2i32 6u32 into r40;
    mul r38 r40 into r41;
    add r36 r41 into r42;
    is.eq r39 0i32 into r43;
    rem r39 10i32 into r44;
    div r39 10i32 into r45;
    pow 2i32 7u32 into r46;
    mul r44 r46 into r47;
    add r42 r47 into r48;
    is.eq r45 0i32 into r49;
    rem r45 10i32 into r50;
    div r45 10i32 into r51;
    pow 2i32 8u32 into r52;
    mul r50 r52 into r53;
    add r48 r53 into r54;
    is.eq r51 0i32 into r55;
    rem r51 10i32 into r56;
    div r51 10i32 into r57;
    pow 2i32 9u32 into r58;
    mul r56 r58 into r59;
    add r54 r59 into r60;
    is.eq r57 0i32 into r61;
    rem r57 10i32 into r62;
    div r57 10i32 into r63;
    pow 2i32 10u32 into r64;
    mul r62 r64 into r65;
    add r60 r65 into r66;
    is.eq r63 0i32 into r67;
    rem r63 10i32 into r68;
    div r63 10i32 into r69;
    pow 2i32 11u32 into r70;
    mul r68 r70 into r71;
    add r66 r71 into r72;
    is.eq r69 0i32 into r73;
    rem r69 10i32 into r74;
    div r69 10i32 into r75;
    pow 2i32 12u32 into r76;
    mul r74 r76 into r77;
    add r72 r77 into r78;
    is.eq r75 0i32 into r79;
    rem r75 10i32 into r80;
    div r75 10i32 into r81;
    pow 2i32 13u32 into r82;
    mul r80 r82 into r83;
    add r78 r83 into r84;
    is.eq r81 0i32 into r85;
    rem r81 10i32 into r86;
    div r81 10i32 into r87;
    pow 2i32 14u32 into r88;
    mul r86 r88 into r89;
    add r84 r89 into r90;
    is.eq r87 0i32 into r91;
    rem r87 10i32 into r92;
    div r87 10i32 into r93;
    pow 2i32 15u32 into r94;
    mul r92 r94 into r95;
    add r90 r95 into r96;
    is.eq r93 0i32 into r97;
    rem r93 10i32 into r98;
    div r93 10i32 into r99;
    pow 2i32 16u32 into r100;
    mul r98 r100 into r101;
    add r96 r101 into r102;
    is.eq r99 0i32 into r103;
    rem r99 10i32 into r104;
    div r99 10i32 into r105;
    pow 2i32 17u32 into r106;
    mul r104 r106 into r107;
    add r102 r107 into r108;
    is.eq r105 0i32 into r109;
    rem r105 10i32 into r110;
    div r105 10i32 into r111;
    pow 2i32 18u32 into r112;
    mul r110 r112 into r113;
    add r108 r113 into r114;
    is.eq r111 0i32 into r115;
    rem r111 10i32 into r116;
    div r111 10i32 into r117;
    pow 2i32 19u32 into r118;
    mul r116 r118 into r119;
    add r114 r119 into r120;
    is.eq r117 0i32 into r121;
    rem r117 10i32 into r122;
    div r117 10i32 into r123;
    pow 2i32 20u32 into r124;
    mul r122 r124 into r125;
    add r120 r125 into r126;
    is.eq r123 0i32 into r127;
    rem r123 10i32 into r128;
    div r123 10i32 into r129;
    pow 2i32 21u32 into r130;
    mul r128 r130 into r131;
    add r126 r131 into r132;
    is.eq r129 0i32 into r133;
    rem r129 10i32 into r134;
    div r129 10i32 into r135;
    pow 2i32 22u32 into r136;
    mul r134 r136 into r137;
    add r132 r137 into r138;
    is.eq r135 0i32 into r139;
    rem r135 10i32 into r140;
    div r135 10i32 into r141;
    pow 2i32 23u32 into r142;
    mul r140 r142 into r143;
    add r138 r143 into r144;
    is.eq r141 0i32 into r145;
    rem r141 10i32 into r146;
    div r141 10i32 into r147;
    pow 2i32 24u32 into r148;
    mul r146 r148 into r149;
    add r144 r149 into r150;
    is.eq r147 0i32 into r151;
    rem r147 10i32 into r152;
    div r147 10i32 into r153;
    pow 2i32 25u32 into r154;
    mul r152 r154 into r155;
    add r150 r155 into r156;
    is.eq r153 0i32 into r157;
    rem r153 10i32 into r158;
    div r153 10i32 into r159;
    pow 2i32 26u32 into r160;
    mul r158 r160 into r161;
    add r156 r161 into r162;
    is.eq r159 0i32 into r163;
    rem r159 10i32 into r164;
    div r159 10i32 into r165;
    pow 2i32 27u32 into r166;
    mul r164 r166 into r167;
    add r162 r167 into r168;
    is.eq r165 0i32 into r169;
    rem r165 10i32 into r170;
    div r165 10i32 into r171;
    pow 2i32 28u32 into r172;
    mul r170 r172 into r173;
    add r168 r173 into r174;
    is.eq r171 0i32 into r175;
    rem r171 10i32 into r176;
    div r171 10i32 into r177;
    pow 2i32 29u32 into r178;
    mul r176 r178 into r179;
    add r174 r179 into r180;
    is.eq r177 0i32 into r181;
    rem r177 10i32 into r182;
    div r177 10i32 into r183;
    pow 2i32 30u32 into r184;
    mul r182 r184 into r185;
    add r180 r185 into r186;
    ternary r181 r180 0i32 into r187;
    ternary r175 r174 r187 into r188;
    ternary r169 r168 r188 into r189;
    ternary r163 r162 r189 into r190;
    ternary r157 r156 r190 into r191;
    ternary r151 r150 r191 into r192;
    ternary r145 r144 r192 into r193;
    ternary r139 r138 r193 into r194;
    ternary r133 r132 r194 into r195;
    ternary r127 r126 r195 into r196;
    ternary r121 r120 r196 into r197;
    ternary r115 r114 r197 into r198;
    ternary r109 r108 r198 into r199;
    ternary r103 r102 r199 into r200;
    ternary r97 r96 r200 into r201;
    ternary r91 r90 r201 into r202;
    ternary r85 r84 r202 into r203;
    ternary r79 r78 r203 into r204;
    ternary r73 r72 r204 into r205;
    ternary r67 r66 r205 into r206;
    ternary r61 r60 r206 into r207;
    ternary r55 r54 r207 into r208;
    ternary r49 r48 r208 into r209;
    ternary r43 r42 r209 into r210;
    ternary r37 r36 r210 into r211;
    ternary r31 r30 r211 into r212;
    ternary r25 r24 r212 into r213;
    ternary r19 r18 r213 into r214;
    ternary r13 r12 r214 into r215;
    ternary r7 r6 r215 into r216;
    ternary r1 0i32 r216 into r217;
    output r217 as i32.private;
